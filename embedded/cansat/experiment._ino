#include "BMI088.h"
#include "SoftwareSerial.h"
#include <Filters.h>
#include <Filters/Butterworth.hpp>
#include <math.h>
#include <MS5611.h>
#include <SparkFun_u-blox_GNSS_v3.h>
#include <SPI.h>
#include <TeensyThreads.h>
#include <Wire.h>

SoftwareSerial lora(15, 14);
MS5611 sensor;
SFE_UBLOX_GNSS GPSGNSS;
Bmi088Accel accel(Wire, 0x18);
Bmi088Gyro gyro(Wire, 0x68);

#define SEALEVELPRESSURE_HPA (1013.25)
#define GPSWire Wire1
#define gnssAddress 0x42

float referencePressure;
float referenceAltitude;
long BAUD_RATE = 57600;

// Sampling frequency
const float f_s = 100; // Hz

// Cut-off frequency (-3 dB)
const float f_c = 40; // Hz

// Normalized cut-off frequency
const float f_n = 2 * f_c / f_s;

// Sixth-order Butterworth filter
auto filter = butter<6>(f_n);

float altitude(float pressure)
{
  return 44308 * (1 - pow((pressure / SEALEVELPRESSURE_HPA), 0.190284));
}

volatile float realTemperature;
volatile float rawPressure;
volatile float realPressure;
volatile float realAltitude;
volatile float relativeAltitude;
volatile float accelX;
volatile float accelY;
volatile float accelZ;
volatile float gyroX;
volatile float gyroY;
volatile float gyroZ;
volatile float latitude;
volatile float longitude;

Threads::Mutex mutexTemp, mutexPress, mutexAccel, mutexGyro, mutexGPS;

void temperatureThread()
{
    while(1)
    {
        Threads::Scope scope(mutexTemp);
        sensor.read();
        realTemperature = sensor.getTemperature();
    }
}

void pressureThread()
{
    while(1)
    {
        Threads::Scope scope(mutexPress);
        sensor.read();
        rawPressure = sensor.getPressure();
        realPressure = filter(rawPressure);
        realAltitude = altitude(realPressure);
        relativeAltitude = realAltitude - referenceAltitude;
    }
}

void accelThread()
{
    while(1)
    {
        Threads::Scope scope(mutexAccel);
        accel.readSensor();
        accelX = accel.getAccelX_mss();
        accelY = accel.getAccelY_mss();
        accelZ = accel.getAccelZ_mss();
    }
}

void gyroThread()
{
    while(1)
    {
        Threads::Scope scope(mutexGyro);
        gyro.readSensor();
        gyroX = gyro.getGyroX_rads();
        gyroY = gyro.getGyroY_rads();
        gyroZ = gyro.getGyroZ_rads();
    }
}

void GPSThread()
{
    while(1)
    {
        Threads::Scope scope(mutexGPS);
        GPSGNSS.getPVT();
        latitude = GPSGNSS.getLatitude() / 10e6;
        longitude = GPSGNSS.getLongitude() / 10e6;
    }
}

void setup()
{
  Serial.begin(BAUD_RATE);
  lora.begin(BAUD_RATE);
  Wire.begin();
  GPSWire.begin();

  if (lora.isListening())
  {
    Serial.println("LoRa is listening!");
  }
  else
  {
    Serial.println("LoRa is not listening!! Check something");
    while (1)
      ;
  }

  if (sensor.begin())
  {
    Serial.println("ms5611 found!");
  }
  else
  {
    Serial.println("ms5611 not found, check wiring!");
    while (1)
      ;
  }

  while (GPSGNSS.begin(GPSWire, gnssAddress) == false)
  {
    Serial.println(F("u-blox GNSS not detected. Retrying..."));
    delay(1000);
  }
  Serial.println("GNSS module detected!");

  int status = accel.begin();
  if (status < 0)
  {
    Serial.println("Accel Initialization Error");
    Serial.println(status);
    while (1)
      ;
  }
  else
  {
    Serial.println("Acceleration initialized!");
  }

  status = gyro.begin();
  if (status < 0)
  {
    Serial.println("Gyro Initialization Error");
    Serial.println(status);
    while (1)
      ;
  }
  else
  {
    Serial.println("Gyro Initialized!");
  }

  sensor.read();
  referencePressure = sensor.getPressure();
  referenceAltitude = altitude(referencePressure);
  sensor.setOversampling(OSR_ULTRA_HIGH);
  GPSGNSS.setI2COutput(COM_TYPE_UBX);
  
  threads.addThread(temperatureThread);
  threads.addThread(pressureThread);
  threads.addThread(accelThread);
  threads.addThread(gyroThread);
  threads.addThread(GPSThread);
}

void println(const char *data)
{
  int dataLength = strlen(data);
  char *str = (char *)malloc(15 + dataLength + (dataLength / 10));
  sprintf(str, "AT+SEND=420,%d,%s", dataLength, data);
  lora.println(str);
  free(str);
}

void loop()
{
  {
    Threads::Scope tempScope(mutexTemp);
    Threads::Scope pressScope(mutexPress);
    Threads::Scope accelScope(mutexAccel);
    Threads::Scope gyroScope(mutexGyro);
    Threads::Scope GPSScope(mutexGPS);

    char buffer[255];
    sprintf(buffer,"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f", realTemperature, realPressure, realAltitude, relativeAltitude, 
    latitude, longitude, accelX, accelY, accelZ, gyroX, gyroY, gyroZ);

    Serial.println(buffer);
    println(buffer);
  }

  threads.yield();
}
